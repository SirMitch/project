Overview of Context Manager and Crash Monitor
1. Context Manager (context_manager.py)
The Context Manager is an advanced file management system designed to handle AI-driven file editing tasks with robust error handling, recovery mechanisms, and extensibility. It provides a modular framework for managing files across multiple formats and interfaces (CLI, GUI, API, and event-driven). Here are its primary features:

Core Features:

File Updates: Supports full and partial updates for various file types (e.g., text, Excel, PDF, YAML, images) using a plugin-based architecture.
Error Handling & Recovery: Includes rollback mechanisms, transaction management, and crash recovery to ensure data integrity.
Version Control: Tracks file versions and changes in a structured manner.
Logging & Reporting: Generates detailed logs and context summaries for transparency and debugging.
Multi-Interface Support: Can operate via command-line, graphical interface, API, or event-driven modes.
Extensibility: Allows adding custom plugins for handling new file types or update methods.
Key Functionalities:

Backup & Rollback: Creates backups before making changes and can restore files to a previous state if needed.
Validation: Validates session summaries and ensures all required sections are present.
Concurrency: Uses multithreading and multiprocessing for efficient parallel execution of tasks.
Crash Recovery: Integrates with the crash_monitor.py for detecting and handling crashes.
2. Crash Monitor (crash_monitor.py)
The Crash Monitor is a companion program for the Context Manager. Its primary purpose is to monitor the Context Manager's process for crashes, hangs, or abnormal behavior and perform necessary cleanup operations. It ensures that the system remains stable and recoverable in case of unexpected failures.

Core Features:

Process Monitoring: Continuously checks if the Context Manager process is alive and functioning properly.
Hang Detection: Detects process hangs based on CPU usage and memory activity thresholds.
Crash Cleanup: Restores files from backups, resets locks, and clears temporary files if a crash is detected.
Timeout Enforcement: Ensures that the Context Manager does not exceed a predefined execution time.
Signal Handling: Monitors for completion signals from the Context Manager to determine successful execution.
Key Functionalities:

Backup Validation: Verifies the existence and integrity of backup files before restoring them.
Lock Management: Resets file locks to prevent deadlocks or conflicts after a crash.
Logging: Appends detailed logs to the shared log file (context_manager.log) for unified diagnostics.
Crash Status Reporting: Writes crash statuses to a file for the Context Manager to reference on restart.
How They Work Together
The Context Manager handles the actual file management tasks, while the Crash Monitor acts as a watchdog to ensure stability and recoverability.
If the Context Manager crashes or hangs, the Crash Monitor steps in to clean up and restore the system to a consistent state.
The integration between the two ensures that operations are resilient to failures and that the system remains operational even under adverse conditions.
Hereâ€™s a textual representation of a mind map for the Context Manager and Crash Monitor. You can visualize it using any mind-mapping tool.